name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  QT_VERSION: 6.7.0
  BUILD_TYPE: Release

jobs:
  # Windows 构建 (MinGW) - 项目目前仅支持此平台
  build-windows-mingw:
    runs-on: windows-latest
    name: "Windows MinGW + Qt6 构建"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Qt with MinGW
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: windows
        target: desktop
        arch: win64_mingw
        tools: 'tools_mingw,qt.tools.win64_mingw900'
        cache: true

    - name: Setup MinGW
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-pkg-config

    - name: Setup PATH
      run: |
        echo "$Qt6_DIR/bin" >> $GITHUB_PATH
        echo "C:/msys64/mingw64/bin" >> $GITHUB_PATH
      shell: bash

    - name: Verify build environment
      run: |
        echo "=== 验证构建环境 ==="
        echo "Qt version:"
        qmake --version
        echo "GCC version:"
        gcc --version
        echo "CMake version:"
        cmake --version
        echo "Ninja version:"
        ninja --version
        echo "Qt installation path:"
        echo "$Qt6_DIR"
      shell: bash

    - name: Configure CMake
      run: |
        echo "=== 配置 CMake ==="
        cmake --preset=mingw
      shell: bash

    - name: Build project
      run: |
        echo "=== 构建项目 ==="
        cmake --build build-mingw --config ${{ env.BUILD_TYPE }}
      shell: bash

    - name: Run tests
      run: |
        echo "=== 运行测试 ==="
        cd build-mingw
        ctest --output-on-failure --build-config ${{ env.BUILD_TYPE }}
      shell: bash

    - name: Package application
      run: |
        echo "=== 打包应用程序 ==="
        cd build-mingw
        if [ -f "src/app/DesktopPet.exe" ]; then
          mkdir -p ../dist
          cp src/app/DesktopPet.exe ../dist/
          
          # 复制Qt库和资源文件
          windeployqt --dir ../dist --force ../dist/DesktopPet.exe
          
          # 复制MinGW运行时库
          cp /mingw64/bin/libgcc_s_seh-1.dll ../dist/ || true
          cp /mingw64/bin/libstdc++-6.dll ../dist/ || true
          cp /mingw64/bin/libwinpthread-1.dll ../dist/ || true
          
          echo "✅ 应用程序打包完成"
          ls -la ../dist/
        else
          echo "❌ 未找到可执行文件"
          exit 1
        fi
      shell: bash

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: DesktopPet-Windows-MinGW
        path: |
          dist/
          !dist/**/*.pdb
        retention-days: 7

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-windows-mingw
        path: |
          build-mingw/Testing/
        retention-days: 3

  # 代码质量检查 - 仅在Windows环境下进行
  code-quality:
    runs-on: windows-latest
    name: "代码质量检查"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Qt (for header dependencies)
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: windows
        target: desktop
        arch: win64_mingw
        tools: 'tools_mingw'
        cache: true

    - name: Setup MinGW
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-clang-tools-extra

    - name: Code formatting check
      run: |
        echo "=== 代码格式检查 ==="
        echo "检查 C++ 代码格式..."
        
        # 使用 clang-format 检查格式 (如果可用)
        if command -v clang-format &> /dev/null; then
          echo "使用 clang-format 检查格式..."
          find src test -name "*.cpp" -o -name "*.h" | while read file; do
            if ! clang-format --dry-run --Werror "$file" > /dev/null 2>&1; then
              echo "❌ 文件 $file 格式不正确"
              exit 1
            fi
          done
          echo "✅ 所有文件格式正确"
        else
          echo "⚠️ clang-format 不可用，跳过格式检查"
        fi
      shell: bash

    - name: Basic static analysis
      run: |
        echo "=== 基础静态分析 ==="
        echo "检查常见的代码问题..."
        
        # 检查是否有明显的问题
        echo "检查头文件包含..."
        find src -name "*.h" | while read file; do
          if ! grep -q "#ifndef\|#pragma once" "$file"; then
            echo "⚠️ 头文件 $file 可能缺少包含守卫"
          fi
        done
        
        echo "检查TODO和FIXME注释..."
        todo_count=$(find src -name "*.cpp" -o -name "*.h" | xargs grep -i "todo\|fixme" | wc -l)
        if [ $todo_count -gt 0 ]; then
          echo "📝 发现 $todo_count 个TODO/FIXME注释"
          find src -name "*.cpp" -o -name "*.h" | xargs grep -n -i "todo\|fixme"
        fi
        
        echo "✅ 基础静态分析完成"
      shell: bash

  # 构建验证 - 确保在干净环境中能够构建
  build-verification:
    runs-on: windows-latest
    name: "干净环境构建验证"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Qt with MinGW
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: windows
        target: desktop
        arch: win64_mingw
        tools: 'tools_mingw,qt.tools.win64_mingw900'
        cache: false  # 不使用缓存，确保干净安装

    - name: Setup MinGW
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja

    - name: Run development environment setup
      run: |
        echo "=== 运行开发环境设置脚本 ==="
        # 模拟运行 setup-dev-env.bat 的关键步骤
        echo "验证开发环境设置..."
        
        echo "检查Qt..."
        qmake --version
        
        echo "检查MinGW..."
        gcc --version
        
        echo "检查CMake..."
        cmake --version
        
        echo "✅ 开发环境验证完成"
      shell: bash

    - name: Configure and build (dry run)
      run: |
        echo "=== 配置构建 (验证) ==="
        
        # 只配置，不实际构建
        cmake --preset=mingw
        
        # 验证构建文件生成
        if [ -f "build-mingw/CMakeCache.txt" ]; then
          echo "✅ CMake 配置成功"
        else
          echo "❌ CMake 配置失败"
          exit 1
        fi
        
        # 快速构建检查
        cmake --build build-mingw --config ${{ env.BUILD_TYPE }} --target help
        
        echo "✅ 构建验证完成"
      shell: bash
