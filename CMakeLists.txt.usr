cmake_minimum_required(VERSION 3.14) # 提高版本要求以支持FetchContent
project(DesktopPet LANGUAGES CXX)

# 性能优化配置
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_PREFIX_PATH "C:/Qt/6.9.1/mingw_64") # Qt Kit Dir 修改为你的Qt安装路径
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 启用并行编译
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    # MSVC并行编译
    add_compile_options(/MP)
endif()

# 调试构建优化
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    # 减少调试信息以加快链接
    if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        set(CMAKE_CXX_FLAGS_DEBUG "-g1 -O0")  # 使用-g1而不是-g3
    endif()
endif()

# Find Qt6
find_package(Qt6 COMPONENTS Widgets Test REQUIRED) # Qt COMPONENTS + Test for testing

# 使用FetchContent获取Google Test（优化版本）
include(FetchContent)

# 设置FetchContent缓存目录
set(FETCHCONTENT_BASE_DIR ${CMAKE_BINARY_DIR}/fetchcontent-cache)

FetchContent_Declare(
    googletest
    GIT_REPOSITORY https://github.com/google/googletest.git
    GIT_TAG        release-1.12.1
)

# 防止覆盖父项目的编译器/链接器设置
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
set(BUILD_GMOCK ON CACHE BOOL "" FORCE)
set(BUILD_GTEST ON CACHE BOOL "" FORCE)
set(INSTALL_GTEST OFF CACHE BOOL "" FORCE)  # 不安装GTest

# 检查是否已经获取，避免重复下载
FetchContent_GetProperties(googletest)
if(NOT googletest_POPULATED)
    message(STATUS "Fetching googletest...")
    FetchContent_Populate(googletest)
    add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR} EXCLUDE_FROM_ALL)
else()
    message(STATUS "googletest already available")
endif()

# 收集源文件
file(GLOB_RECURSE SOURCES 
    "src/*.cpp"
    "src/*.h"
    "src/*.ui"
)

# 添加资源文件
set(RESOURCES resources.qrc)

# 编译器特定优化
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    # MSVC编译优化
    add_compile_options(/utf-8 /MP)
    if(CMAKE_BUILD_TYPE STREQUAL "Debug")
        add_compile_options(/Od /Zi)
    else()
        add_compile_options(/O2 /DNDEBUG)
    endif()
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    # MinGW编译优化
    add_compile_options(-Wall -Wextra)
    # 移除静态链接避免Qt兼容性问题
    # set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libgcc -static-libstdc++")
    
    # 添加Qt6兼容性标志
    add_compile_definitions(QT_NO_KEYWORDS)
    add_compile_definitions(QT_DISABLE_DEPRECATED_BEFORE=0x060000)
    
    # 移除过于严格的转换限制
    # add_compile_definitions(QT_NO_CAST_FROM_ASCII)
    # add_compile_definitions(QT_NO_CAST_TO_ASCII)
    
    if(CMAKE_BUILD_TYPE STREQUAL "Debug")
        add_compile_options(-g1 -O0)  # 减少调试信息
    else()
        add_compile_options(-O2 -DNDEBUG)
    endif()
endif()

add_executable(${PROJECT_NAME}
    # WIN32 # 暂时移除WIN32标志避免EntryPoint问题
    ${SOURCES}
    ${RESOURCES}
) 
target_link_libraries(${PROJECT_NAME} PRIVATE Qt6::Widgets) # Qt6 Shared Library

# # Qt 6.9 + MinGW 链接修复 - 手动移除EntryPoint
# if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" AND WIN32)
#     # 不使用Qt6EntryPoint，使用我们自己的WinMain
#     target_compile_definitions(${PROJECT_NAME} PRIVATE QT_NO_ENTRYPOINT)
#     # 完全跳过EntryPoint库的链接
#     set_property(TARGET ${PROJECT_NAME} PROPERTY LINK_WHAT_YOU_USE FALSE)
# endif()

# 创建库文件供测试使用（排除main.cpp）
file(GLOB_RECURSE LIB_SOURCES 
    "src/app/*.cpp" "src/app/*.h"
    "src/model/*.cpp" "src/model/*.h"
    "src/viewmodel/*.cpp" "src/viewmodel/*.h"
    "src/view/*.cpp" "src/view/*.h"
    "src/common/*.cpp" "src/common/*.h"
)

# 排除main.cpp文件
list(FILTER LIB_SOURCES EXCLUDE REGEX ".*main\\.cpp$")

add_library(DesktopPetLib STATIC ${LIB_SOURCES} ${RESOURCES})
target_link_libraries(DesktopPetLib PUBLIC Qt6::Widgets)
target_include_directories(DesktopPetLib PUBLIC src)

# 启用测试
enable_testing()

# 检查单元测试文件
file(GLOB_RECURSE UNIT_TEST_SOURCES "test/unit/*.cpp" "test/unit/*.h")
# 检查集成测试文件
file(GLOB_RECURSE INTEGRATION_TEST_SOURCES "test/integration/*.cpp" "test/integration/*.h")

if(UNIT_TEST_SOURCES OR INTEGRATION_TEST_SOURCES)
    # 创建单元测试可执行文件
    if(UNIT_TEST_SOURCES)
        message(STATUS "Found unit test sources: ${UNIT_TEST_SOURCES}")
        add_executable(DesktopPetUnitTests ${UNIT_TEST_SOURCES})
        target_link_libraries(DesktopPetUnitTests 
            PRIVATE 
            DesktopPetLib
            gtest_main
            gmock_main
            Qt6::Widgets
            Qt6::Test
        )
        target_include_directories(DesktopPetUnitTests PRIVATE src)
        
        # 添加单元测试
        add_test(NAME UnitTests COMMAND DesktopPetUnitTests)
    endif()
    
    # 创建集成测试可执行文件
    if(INTEGRATION_TEST_SOURCES)
        message(STATUS "Found integration test sources: ${INTEGRATION_TEST_SOURCES}")
        add_executable(DesktopPetIntegrationTests ${INTEGRATION_TEST_SOURCES})
        target_link_libraries(DesktopPetIntegrationTests 
            PRIVATE 
            DesktopPetLib
            gtest_main
            gmock_main
            Qt6::Widgets
            Qt6::Test
        )
        target_include_directories(DesktopPetIntegrationTests PRIVATE src)
        
        # 添加集成测试
        add_test(NAME IntegrationTests COMMAND DesktopPetIntegrationTests)
    endif()
    
    # 创建统一的测试可执行文件（包含所有测试）
    if(UNIT_TEST_SOURCES AND INTEGRATION_TEST_SOURCES)
        set(ALL_TEST_SOURCES ${UNIT_TEST_SOURCES} ${INTEGRATION_TEST_SOURCES})
        add_executable(DesktopPetAllTests ${ALL_TEST_SOURCES})
        target_link_libraries(DesktopPetAllTests 
            PRIVATE 
            DesktopPetLib
            gtest_main
            gmock_main
            Qt6::Widgets
            Qt6::Test
        )
        target_include_directories(DesktopPetAllTests PRIVATE src)
        
        # 添加所有测试
        add_test(NAME AllTests COMMAND DesktopPetAllTests)
    endif()
else()
    message(STATUS "No test sources found")
endif()